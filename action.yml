name: 'Julia compute test matrix'
description: 'Compute a test matrix'
inputs:
  include-release-versions:
    type: boolean
    required: false
    default: true
  include-lts-versions:
    type: boolean
    required: false
    default: true
  include-all-compatible-minor-versions:
    type: boolean
    required: false
    default: false
  include-smallest-compatible-minor-versions:
    type: boolean
    required: false
    default: true
  include-rc-versions:
    type: boolean
    required: false
    default: false
  include-beta-versions:
    type: boolean
    required: false
    default: false
  include-alpha-versions:
    type: boolean
    required: false
    default: false
  include-nightly-versions:
    type: boolean
    required: false
    default: false
  include-windows-x64:
    type: boolean
    required: false
    default: true
  include-windows-x86:
    type: boolean
    required: false
    default: true
  include-linux-x64:
    type: boolean
    required: false
    default: true
  include-linux-x86:
    type: boolean
    required: false
    default: true
  include-macos-x64:
    type: boolean
    required: false
    default: true
  include-macos-aarch64:
    type: boolean
    required: false
    default: true
outputs:
  test-matrix:
    value: ${{ steps.compute-test-matrix.outputs.test-matrix }}
runs:
  using: "composite"
  steps:
    - name: Compute Manifest hash
      id: project-hash
      shell: pwsh
      run: |
        $ourHash = Get-FileHash -LiteralPath "$env:GITHUB_ACTION_PATH\Manifest.toml"
        "MANIFEST_HASH=$($ourHash.Hash)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    - name: Check Julia version
      shell: bash
      id: julia-version
      run: |
        echo "JULIA_VERSION=$(julia -v)" >> $GITHUB_OUTPUT
    - uses: actions/cache@v4
      id: cache-project
      with:
        path: ${{ runner.tool_cache }}/julia-get-compatible-juliaup-channels
        key: julia-get-compatible-juliaup-channels-cache-${{ runner.os }}-${{ steps.julia-version.outputs.JULIA_VERSION }}-${{ steps.project-hash.outputs.MANIFEST_HASH }}
    - name: Install and precompile
      if: steps.cache-project.outputs.cache-hit != 'true'
      run: julia -e 'import Pkg; Pkg.instantiate()'
      shell: bash
      env:
        JULIA_PROJECT: ${{ github.action_path }}
        JULIA_DEPOT_PATH: ${{ runner.tool_cache }}/julia-get-compatible-juliaup-channels
    - uses: actions/cache/save@v4
      if: steps.cache-project.outputs.cache-hit != 'true'
      with:
        path: ${{ runner.tool_cache }}/julia-get-compatible-juliaup-channels
        key: julia-get-compatible-juliaup-channels-cache-${{ runner.os }}-${{ steps.julia-version.outputs.JULIA_VERSION }}-${{ steps.project-hash.outputs.MANIFEST_HASH }}
    - name: Compute compatible Juliaup channels
      id: compute-test-matrix
      run: julia ${{ github.action_path }}/main.jl
      shell: pwsh
      env:
        JULIA_PROJECT: ${{ github.action_path }}
        JULIA_DEPOT_PATH: ${{ runner.tool_cache }}/julia-get-compatible-juliaup-channels
        INCLUDE_RELEASE_VERSIONS: ${{ inputs.include-release-versions }}
        INCLUDE_LTS_VERSIONS: ${{ inputs.include-lts-versions }}
        INCLUDE_ALL_COMPATIBLE_MINOR_VERSIONS: ${{ inputs.include-all-compatible-minor-versions }}
        INCLUDE_SMALLEST_COMPATIBLE_MINOR_VERSIONS: ${{ inputs.include-smallest-compatible-minor-versions }}
        INCLUDE_RC_VERSIONS: ${{ inputs.include-rc-versions }}
        INCLUDE_BETA_VERSIONS: ${{ inputs.include-beta-versions }}
        INCLUDE_ALPHA_VERSIONS: ${{ inputs.include-alpha-versions }}
        INCLUDE_NIGHTLY_VERSIONS: ${{ inputs.include-nightly-versions }}
        INCLUDE_WINDOWS_X64: ${{ inputs.include-windows-x64 }}
        INCLUDE_WINDOWS_X86: ${{ inputs.include-windows-x86 }}
        INCLUDE_LINUX_X64: ${{ inputs.include-linux-x64 }}
        INCLUDE_LINUX_X86: ${{ inputs.include-linux-x86 }}
        INCLUDE_MACOS_X64: ${{ inputs.include-macos-x64 }}
        INCLUDE_MACOS_AARCH64: ${{ inputs.include-macos-aarch64 }}
